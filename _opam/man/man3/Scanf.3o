.TH "Scanf" 3 2021-12-09 OCamldoc "OCaml library"
.SH NAME
Scanf \- Formatted input functions.
.SH Module
Module   Scanf
.SH Documentation
.sp
Module
.BI "Scanf"
 : 
.B sig  end

.sp
Formatted input functions\&.
.sp

.sp

.sp
.sp

.PP

.B === 
.B Introduction
.B  ===

.PP

.PP

.B === 
.B Functional input with format strings
.B  ===

.PP

.PP

.B === The module Scanf provides formatted input functions or scanners\&.
.B 
.B     The formatted input functions can read from any kind of input, including
.B     strings, files, or anything that can return characters\&. The more general
.B     source of characters is named a scanning buffer and has type
.B     Scanf\&.Scanning\&.scanbuf\&. The more general formatted input function reads from
.B     any scanning buffer and is named bscanf\&.
.B 
.B     Generally speaking, the formatted input functions have 3 arguments:
.B \- the first argument is a source of characters for the input,
.B \- the second argument is a format string that specifies the values to
.B       read,
.B \- the third argument is a receiver function that is applied to the
.B       values read\&.
.B 
.B     Hence, a typical call to the formatted input function Scanf\&.bscanf is
.B     bscanf ib fmt f, where:
.B 
.B \- ib is a source of characters (typically a     scanning buffer with type Scanf\&.Scanning\&.scanbuf),
.B 
.B \- fmt is a format string (the same format strings as those used to print
.B     material with module Printf or Format),
.B 
.B \- f is a function that has as many arguments as the number of values to
.B     read in the input\&.
.B  ===

.PP

.PP

.B === 
.B A simple example
.B  ===

.PP

.PP

.B === As suggested above, the expression bscanf ib "%d" f reads a decimal
.B     integer n from the source of characters ib and returns f n\&.
.B 
.B     For instance,
.B 
.B \- if we use stdib as the source of characters (Scanf\&.Scanning\&.stdib is
.B     the predefined input buffer that reads from standard input),
.B 
.B \- if we define the receiver f as let f x = x + 1,
.B 
.B     then bscanf stdib "%d" f reads an integer n from the standard input
.B     and returns f n (that is n + 1)\&. Thus, if we evaluate bscanf stdib
.B     "%d" f, and then enter 41 at the keyboard, we get 42 as the final
.B     result\&. ===

.PP

.PP

.B === 
.B Formatted input as a functional feature
.B  ===

.PP

.PP

.B === The Caml scanning facility is reminiscent of the corresponding C feature\&.
.B     However, it is also largely different, simpler, and yet more powerful:
.B     the formatted input functions are higher\-order functionals and the
.B     parameter passing mechanism is just the regular function application not
.B     the variable assignment based mechanism which is typical for formatted
.B     input in imperative languages; the Caml format strings also feature
.B     useful additions to easily define complex tokens; as expected within a
.B     functional programming language, the formatted input functions also
.B     support polymorphism, in particular arbitrary interaction with
.B     polymorphic user\-defined scanners\&.  Furthermore, the Caml formatted input
.B     facility is fully type\-checked at compile time\&. ===

.PP
.I module Scanning : 
.B sig  end

.sp

.B Scanning buffers

.sp

.sp

.PP

.B === 
.B Type of formatted input functions
.B  ===

.PP
.I type 
.B ('a, 'b, 'c, 'd)
.I scanner 
= 
.B ('a, Scanning.scanbuf, 'b, 'c, 'a -> 'd, 'd) format6 -> 'c

.sp
The type of formatted input scanners: 
.B (\&'a, \&'b, \&'c, \&'d) scanner
is the
type of a formatted input function that reads from some scanning buffer
according to some format string; more precisely, if 
.B scan
is some
formatted input function, then 
.B scan ib fmt f
applies 
.B f
to the arguments
specified by the format string 
.B fmt
, when 
.B scan
has read those arguments
from the scanning input buffer 
.B ib
\&.
.sp
For instance, the 
.B scanf
function below has type 
.B (\&'a, \&'b, \&'c, \&'d)
.B     scanner
, since it is a formatted input function that reads from 
.B stdib
:
.B scanf fmt f
applies 
.B f
to the arguments specified by 
.B fmt
, reading
those arguments from 
.B stdin
as expected\&.
.sp
If the format 
.B fmt
has some 
.B %r
indications, the corresponding input
functions must be provided before the receiver 
.B f
argument\&. For
instance, if 
.B read_elem
is an input function for values of type 
.B t
,
then 
.B bscanf ib "%r;" read_elem f
reads a value 
.B v
of type 
.B t
followed
by a 
.B \&';\&'
character, and returns 
.B f v
\&.
.sp

.sp

.I exception Scan_failure 
.B of 
.B string

.sp
The exception that formatted input functions raise when the input cannot be
read according to the given format\&.
.sp

.sp

.PP

.B === 
.B The general formatted input function
.B  ===

.PP

.I val bscanf 
: 
.B Scanning.scanbuf -> ('a, 'b, 'c, 'd) scanner
.sp

.B bscanf ib fmt r1 \&.\&.\&. rN f
reads arguments for the function 
.B f
, from the
scanning buffer 
.B ib
, according to the format string 
.B fmt
, and applies 
.B f
to these values\&.
The result of this call to 
.B f
is returned as the result of the entire
.B bscanf
call\&.
For instance, if 
.B f
is the function 
.B fun s i \-> i + 1
, then
.B Scanf\&.sscanf "x=  1" "%s = %i" f
returns 
.B 2
\&.
.sp
Arguments 
.B r1
to 
.B rN
are user\-defined input functions that read the
argument corresponding to a 
.B %r
conversion\&.
.sp

.sp

.PP

.B === 
.B Format string description
.B  ===

.PP

.PP

.B === The format is a character string which contains three types of
.B     objects:
.B \- plain characters, which are simply matched with the characters of the
.B       input,
.B \- conversion specifications, each of which causes reading and conversion of
.B       one argument for the function f,
.B \- scanning indications to specify boundaries of tokens\&.
.B  ===

.PP

.PP

.B === 
.B The space character in format strings
.B  ===

.PP

.PP

.B === As mentioned above, a plain character in the format string is just
.B     matched with the next character of the input; however, two characters are
.B     special exceptions to this rule: the space character (\&' \&' or ASCII code
.B     32) and the line feed character (\&'\(rsn\&' or ASCII code 10)\&.
.B     A space does not match a single space character, but any amount of
.B     ``whitespace\&'\&' in the input\&. More precisely, a space inside the format
.B     string matches any number of tab, space, line feed and carriage
.B     return characters\&. Similarly, a line feed character in the format string
.B     matches either a single line feed or a carriage return followed by a line
.B     feed\&.
.B 
.B     Matching any amount of whitespace, a space in the format string
.B     also matches no amount of whitespace at all; hence, the call bscanf ib
.B     "Price = %d $" (fun p \-> p) succeeds and returns 1 when reading an
.B     input with various whitespace in it, such as Price = 1 $,
.B     Price  =  1    $, or even Price=1$\&. ===

.PP

.PP

.B === 
.B Conversion specifications in format strings
.B  ===

.PP

.PP

.B === Conversion specifications consist in the % character, followed by
.B     an optional flag, an optional field width, and followed by one or
.B     two conversion characters\&. The conversion characters and their
.B     meanings are:
.B 
.B \- d: reads an optionally signed decimal integer\&.
.B \- i: reads an optionally signed integer
.B       (usual input formats for hexadecimal (0x[d]+ and 0X[d]+),
.B        octal (0o[d]+), and binary 0b[d]+ notations are understood)\&.
.B \- u: reads an unsigned decimal integer\&.
.B \- x or X: reads an unsigned hexadecimal integer\&.
.B \- o: reads an unsigned octal integer\&.
.B \- s: reads a string argument that spreads as much as possible, until the
.B       following bounding condition holds: a whitespace has been found, a
.B       scanning indication has been encountered, or the end\-of\-input has been
.B       reached\&.
.B       Hence, this conversion always succeeds: it returns an empty
.B       string, if the bounding condition holds when the scan begins\&.
.B \- S: reads a delimited string argument (delimiters and special
.B       escaped characters follow the lexical conventions of Caml)\&.
.B \- c: reads a single character\&. To test the current input character
.B       without reading it, specify a null field width, i\&.e\&. use
.B       specification %0c\&. Raise Invalid_argument, if the field width
.B       specification is greater than 1\&.
.B \- C: reads a single delimited character (delimiters and special
.B       escaped characters follow the lexical conventions of Caml)\&.
.B \- f, e, E, g, G: reads an optionally signed
.B       floating\-point number in decimal notation, in the style dddd\&.ddd
.B       e/E+\-dd\&.
.B \- F: reads a floating point number according to the lexical
.B       conventions of Caml (hence the decimal point is mandatory if the
.B       exponent part is not mentioned)\&.
.B \- B: reads a boolean argument (true or false)\&.
.B \- b: reads a boolean argument (for backward compatibility; do not use
.B       in new programs)\&.
.B \- ld, li, lu, lx, lX, lo: reads an int32 argument to
.B       the format specified by the second letter (decimal, hexadecimal, etc)\&.
.B \- nd, ni, nu, nx, nX, no: reads a nativeint argument to
.B       the format specified by the second letter\&.
.B \- Ld, Li, Lu, Lx, LX, Lo: reads an int64 argument to
.B       the format specified by the second letter\&.
.B \- [ range ]: reads characters that matches one of the characters
.B       mentioned in the range of characters range (or not mentioned in
.B       it, if the range starts with ^)\&. Reads a string that can be
.B       empty, if the next input character does not match the range\&. The set of
.B       characters from c1 to c2 (inclusively) is denoted by c1\-c2\&.
.B       Hence, %[0\-9] returns a string representing a decimal number
.B       or an empty string if no decimal digit is found; similarly,
.B       %[\(rs\(rs048\-\(rs\(rs057\(rs\(rs065\-\(rs\(rs070] returns a string of hexadecimal digits\&.
.B       If a closing bracket appears in a range, it must occur as the
.B       first character of the range (or just after the ^ in case of
.B       range negation); hence []] matches a ] character and
.B       [^]] matches any character that is not ]\&.
.B \- r: user\-defined reader\&. Takes the next ri formatted input function and
.B       applies it to the scanning buffer ib to read the next argument\&. The
.B       input function ri must therefore have type Scanning\&.scanbuf \-> \&'a and
.B       the argument read has type \&'a\&.
.B \- { fmt %}: reads a format string argument\&.
.B       The format string read must have the same type as the format string
.B       specification fmt\&.
.B       For instance, "%{%i%}" reads any format string that can read a value of
.B       type int; hence Scanf\&.sscanf "fmt:\(rs\(rs\(rs"number is %u\(rs\(rs\(rs"" "fmt:%{%i%}"
.B       succeeds and returns the format string "number is %u"\&.
.B \- \(rs( fmt %\(rs): scanning format substitution\&.
.B       Reads a format string to replace fmt\&.
.B       The format string read must have the same type as the format string
.B       specification fmt\&.
.B       For instance, "%\(rs( %i% \(rs)" reads any format string that can read a value
.B       of type int; hence Scanf\&.sscanf "\(rs\(rs\(rs"%4d\(rs\(rs\(rs"1234\&.00" "%\(rs(%i%\(rs)"
.B       is equivalent to Scanf\&.sscanf "1234\&.00" "%4d"\&.
.B \- l: returns the number of lines read so far\&.
.B \- n: returns the number of characters read so far\&.
.B \- N or L: returns the number of tokens read so far\&.
.B \- !: matches the end of input condition\&.
.B \- %: matches one % character in the input\&.
.B \- ,: the no\-op delimiter for conversion specifications\&.
.B 
.B     Following the % character that introduces a conversion, there may be
.B     the special flag _: the conversion that follows occurs as usual,
.B     but the resulting value is discarded\&.
.B     For instance, if f is the function fun i \-> i + 1, then
.B     Scanf\&.sscanf "x = 1" "%_s = %i" f returns 2\&.
.B 
.B     The field width is composed of an optional integer literal
.B     indicating the maximal width of the token to read\&.
.B     For instance, %6d reads an integer, having at most 6 decimal digits;
.B     %4f reads a float with at most 4 characters; and %8[\(rs\(rs000\-\(rs\(rs255]
.B     returns the next 8 characters (or all the characters still available,
.B     if fewer than 8 characters are available in the input)\&.
.B 
.B     Notes:
.B 
.B \- as mentioned above, a %s conversion always succeeds, even if there is
.B       nothing to read in the input: it simply returns ""\&.
.B 
.B \- in addition to the relevant digits, \&'_\&' characters may appear
.B     inside numbers (this is reminiscent to the usual Caml lexical
.B     conventions)\&. If stricter scanning is desired, use the range
.B     conversion facility instead of the number conversions\&.
.B 
.B \- the scanf facility is not intended for heavy duty lexical
.B     analysis and parsing\&. If it appears not expressive enough for your
.B     needs, several alternative exists: regular expressions (module
.B     Str), stream parsers, ocamllex\-generated lexers,
.B     ocamlyacc\-generated parsers\&.
.B  ===

.PP

.PP

.B === 
.B Scanning indications in format strings
.B  ===

.PP

.PP

.B === Scanning indications appear just after the string conversions %s
.B     and %[ range ] to delimit the end of the token\&. A scanning
.B     indication is introduced by a @ character, followed by some
.B     constant character c\&. It means that the string token should end
.B     just before the next matching c (which is skipped)\&. If no c
.B     character is encountered, the string token spreads as much as
.B     possible\&. For instance, "%s@\(rst" reads a string up to the next
.B     tab character or to the end of input\&. If a scanning
.B     indication @c does not follow a string conversion, it is treated
.B     as a plain c character\&.
.B 
.B     Note:
.B 
.B \- the scanning indications introduce slight differences in the syntax of
.B     Scanf format strings, compared to those used for the Printf
.B     module\&. However, the scanning indications are similar to those used in
.B     the Format module; hence, when producing formatted text to be scanned
.B     by !Scanf\&.bscanf, it is wise to use printing functions from the
.B     Format module (or, if you need to use functions from Printf, banish
.B     or carefully double check the format strings that contain \&'@\&'
.B     characters)\&.
.B  ===

.PP

.PP

.B === 
.B Exceptions during scanning
.B  ===

.PP

.PP

.B === Scanners may raise the following exceptions when the input cannot be read
.B     according to the format string:
.B 
.B \- Raise Scanf\&.Scan_failure if the input does not match the format\&.
.B 
.B \- Raise Failure if a conversion to a number is not possible\&.
.B 
.B \- Raise End_of_file if the end of input is encountered while some more
.B       characters are needed to read the current conversion specification\&.
.B 
.B \- Raise Invalid_argument if the format string is invalid\&.
.B 
.B     Note:
.B 
.B \- as a consequence, scanning a %s conversion never raises exception
.B     End_of_file: if the end of input is reached the conversion succeeds and
.B     simply returns the characters read so far, or "" if none were read\&.
.B  ===

.PP

.PP

.B === 
.B Specialised formatted input functions
.B  ===

.PP

.I val fscanf 
: 
.B Pervasives.in_channel -> ('a, 'b, 'c, 'd) scanner
.sp
Same as 
.B Scanf\&.bscanf
, but reads from the given channel\&.
.sp
Warning: since all formatted input functions operate from a scanning
buffer, be aware that each 
.B fscanf
invocation will operate with a
scanning buffer reading from the given channel\&. This extra level of
bufferization can lead to strange scanning behaviour if you use low level
primitives on the channel (reading characters, seeking the reading
position, and so on)\&.
.sp
As a consequence, never mix direct low level reading and high level
scanning from the same input channel\&.
.sp

.sp

.I val sscanf 
: 
.B string -> ('a, 'b, 'c, 'd) scanner
.sp
Same as 
.B Scanf\&.bscanf
, but reads from the given string\&.
.sp

.sp

.I val scanf 
: 
.B ('a, 'b, 'c, 'd) scanner
.sp
Same as 
.B Scanf\&.bscanf
, but reads from the predefined scanning
buffer 
.B Scanf\&.Scanning\&.stdib
that is connected to 
.B stdin
\&.
.sp

.sp

.I val kscanf 
: 
.B Scanning.scanbuf ->
.B   (Scanning.scanbuf -> exn -> 'a) -> ('b, 'c, 'd, 'a) scanner
.sp
Same as 
.B Scanf\&.bscanf
, but takes an additional function argument
.B ef
that is called in case of error: if the scanning process or
some conversion fails, the scanning function aborts and calls the
error handling function 
.B ef
with the scanning buffer and the
exception that aborted the scanning process\&.
.sp

.sp

.PP

.B === 
.B Reading format strings from input
.B  ===

.PP

.I val bscanf_format 
: 
.B Scanning.scanbuf ->
.B   ('a, 'b, 'c, 'd, 'e, 'f) format6 ->
.B   (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g
.sp

.B bscanf_format ib fmt f
reads a format string token from the scanning
buffer 
.B ib
, according to the given format string 
.B fmt
, and applies 
.B f
to
the resulting format string value\&.
Raise 
.B Scan_failure
if the format string value read does not have the
same type as 
.B fmt
\&.
.sp

.sp

.I val sscanf_format 
: 
.B string ->
.B   ('a, 'b, 'c, 'd, 'e, 'f) format6 ->
.B   (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g
.sp
Same as 
.B Scanf\&.bscanf_format
, but reads from the given string\&.
.sp

.sp

.I val format_from_string 
: 
.B string ->
.B   ('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f) format6
.sp

.B format_from_string s fmt
converts a string argument to a format string,
according to the given format string 
.B fmt
\&.
Raise 
.B Scan_failure
if 
.B s
, considered as a format string, does not
have the same type as 
.B fmt
\&.
.sp

.sp
