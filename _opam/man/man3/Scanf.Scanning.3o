.TH "Scanf.Scanning" 3 2021-12-09 OCamldoc "OCaml library"
.SH NAME
Scanf.Scanning \-  Scanning buffers 
.SH Module
Module   Scanf.Scanning
.SH Documentation
.sp
Module
.BI "Scanning"
 : 
.B sig  end

.sp

.B Scanning buffers

.sp

.sp

.sp
.sp
.I type scanbuf 

.sp
The type of scanning buffers\&. A scanning buffer is the source from which a
formatted input function gets characters\&. The scanning buffer holds the
current state of the scan, plus a function to get the next char from the
input, and a token buffer to store the string matched so far\&.
.sp
Note: a scan may often require to examine one character in advance;
when this ``lookahead\&'\&' character does not belong to the token read,
it is stored back in the scanning buffer and becomes the next
character read\&.
.sp

.sp

.I val stdib 
: 
.B scanbuf
.sp
The scanning buffer reading from 
.B stdin
\&.
.B stdib
is equivalent to 
.B Scanning\&.from_channel stdin
\&.
.sp
Note: when input is read interactively from 
.B stdin
, the newline character
that triggers the evaluation is incorporated in the input; thus, scanning
specifications must properly skip this character (simply add a 
.B \&'\(rsn\&'
as the last character of the format string)\&.
.sp

.sp

.I val from_string 
: 
.B string -> scanbuf
.sp

.B Scanning\&.from_string s
returns a scanning buffer which reads from the
given string\&.
Reading starts from the first character in the string\&.
The end\-of\-input condition is set when the end of the string is reached\&.
.sp

.sp

.I val from_file 
: 
.B string -> scanbuf
.sp
Bufferized file reading in text mode\&. The efficient and usual
way to scan text mode files (in effect, 
.B from_file
returns a
scanning buffer that reads characters in large chunks, rather than one
character at a time as buffers returned by 
.B from_channel
do)\&.
.B Scanning\&.from_file fname
returns a scanning buffer which reads
from the given file 
.B fname
in text mode\&.
.sp

.sp

.I val from_file_bin 
: 
.B string -> scanbuf
.sp
Bufferized file reading in binary mode\&.
.sp

.sp

.I val from_function 
: 
.B (unit -> char) -> scanbuf
.sp

.B Scanning\&.from_function f
returns a scanning buffer with the given
function as its reading method\&.
.sp
When scanning needs one more character, the given function is called\&.
.sp
When the function has no more character to provide, it must signal an
end\-of\-input condition by raising the exception 
.B End_of_file
\&.
.sp

.sp

.I val from_channel 
: 
.B Pervasives.in_channel -> scanbuf
.sp

.B Scanning\&.from_channel ic
returns a scanning buffer which reads from the
input channel 
.B ic
, starting at the current reading position\&.
.sp

.sp

.I val end_of_input 
: 
.B scanbuf -> bool
.sp

.B Scanning\&.end_of_input ib
tests the end\-of\-input condition of the given
scanning buffer\&.
.sp

.sp

.I val beginning_of_input 
: 
.B scanbuf -> bool
.sp

.B Scanning\&.beginning_of_input ib
tests the beginning of input condition of
the given scanning buffer\&.
.sp

.sp

.I val name_of_input 
: 
.B scanbuf -> string
.sp

.B Scanning\&.file_name_of_input ib
returns the name of the character source
for the scanning buffer 
.B ib
\&.
.sp

.sp
